// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocal.proto

#ifndef PROTOBUF_INCLUDED_Protocal_2eproto
#define PROTOBUF_INCLUDED_Protocal_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Protocal_2eproto 

namespace protobuf_Protocal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Protocal_2eproto
class PClientIsOnline;
class PClientIsOnlineDefaultTypeInternal;
extern PClientIsOnlineDefaultTypeInternal _PClientIsOnline_default_instance_;
class PClientLogin;
class PClientLoginDefaultTypeInternal;
extern PClientLoginDefaultTypeInternal _PClientLogin_default_instance_;
class PClientLoginFeedback;
class PClientLoginFeedbackDefaultTypeInternal;
extern PClientLoginFeedbackDefaultTypeInternal _PClientLoginFeedback_default_instance_;
namespace google {
namespace protobuf {
template<> ::PClientIsOnline* Arena::CreateMaybeMessage<::PClientIsOnline>(Arena*);
template<> ::PClientLogin* Arena::CreateMaybeMessage<::PClientLogin>(Arena*);
template<> ::PClientLoginFeedback* Arena::CreateMaybeMessage<::PClientLoginFeedback>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class PClientLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PClientLogin) */ {
 public:
  PClientLogin();
  virtual ~PClientLogin();

  PClientLogin(const PClientLogin& from);

  inline PClientLogin& operator=(const PClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PClientLogin(PClientLogin&& from) noexcept
    : PClientLogin() {
    *this = ::std::move(from);
  }

  inline PClientLogin& operator=(PClientLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PClientLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PClientLogin* internal_default_instance() {
    return reinterpret_cast<const PClientLogin*>(
               &_PClientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PClientLogin* other);
  friend void swap(PClientLogin& a, PClientLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PClientLogin* New() const final {
    return CreateMaybeMessage<PClientLogin>(NULL);
  }

  PClientLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PClientLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PClientLogin& from);
  void MergeFrom(const PClientLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PClientLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string LoginName = 1;
  void clear_loginname();
  static const int kLoginNameFieldNumber = 1;
  const ::std::string& loginname() const;
  void set_loginname(const ::std::string& value);
  #if LANG_CXX11
  void set_loginname(::std::string&& value);
  #endif
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  ::std::string* mutable_loginname();
  ::std::string* release_loginname();
  void set_allocated_loginname(::std::string* loginname);

  // @@protoc_insertion_point(class_scope:PClientLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr loginname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PClientLoginFeedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PClientLoginFeedback) */ {
 public:
  PClientLoginFeedback();
  virtual ~PClientLoginFeedback();

  PClientLoginFeedback(const PClientLoginFeedback& from);

  inline PClientLoginFeedback& operator=(const PClientLoginFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PClientLoginFeedback(PClientLoginFeedback&& from) noexcept
    : PClientLoginFeedback() {
    *this = ::std::move(from);
  }

  inline PClientLoginFeedback& operator=(PClientLoginFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PClientLoginFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PClientLoginFeedback* internal_default_instance() {
    return reinterpret_cast<const PClientLoginFeedback*>(
               &_PClientLoginFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PClientLoginFeedback* other);
  friend void swap(PClientLoginFeedback& a, PClientLoginFeedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PClientLoginFeedback* New() const final {
    return CreateMaybeMessage<PClientLoginFeedback>(NULL);
  }

  PClientLoginFeedback* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PClientLoginFeedback>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PClientLoginFeedback& from);
  void MergeFrom(const PClientLoginFeedback& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PClientLoginFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:PClientLoginFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PClientIsOnline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PClientIsOnline) */ {
 public:
  PClientIsOnline();
  virtual ~PClientIsOnline();

  PClientIsOnline(const PClientIsOnline& from);

  inline PClientIsOnline& operator=(const PClientIsOnline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PClientIsOnline(PClientIsOnline&& from) noexcept
    : PClientIsOnline() {
    *this = ::std::move(from);
  }

  inline PClientIsOnline& operator=(PClientIsOnline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PClientIsOnline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PClientIsOnline* internal_default_instance() {
    return reinterpret_cast<const PClientIsOnline*>(
               &_PClientIsOnline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PClientIsOnline* other);
  friend void swap(PClientIsOnline& a, PClientIsOnline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PClientIsOnline* New() const final {
    return CreateMaybeMessage<PClientIsOnline>(NULL);
  }

  PClientIsOnline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PClientIsOnline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PClientIsOnline& from);
  void MergeFrom(const PClientIsOnline& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PClientIsOnline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Online = 1;
  void clear_online();
  static const int kOnlineFieldNumber = 1;
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:PClientIsOnline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool online_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Protocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PClientLogin

// string LoginName = 1;
inline void PClientLogin::clear_loginname() {
  loginname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PClientLogin::loginname() const {
  // @@protoc_insertion_point(field_get:PClientLogin.LoginName)
  return loginname_.GetNoArena();
}
inline void PClientLogin::set_loginname(const ::std::string& value) {
  
  loginname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PClientLogin.LoginName)
}
#if LANG_CXX11
inline void PClientLogin::set_loginname(::std::string&& value) {
  
  loginname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PClientLogin.LoginName)
}
#endif
inline void PClientLogin::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PClientLogin.LoginName)
}
inline void PClientLogin::set_loginname(const char* value, size_t size) {
  
  loginname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PClientLogin.LoginName)
}
inline ::std::string* PClientLogin::mutable_loginname() {
  
  // @@protoc_insertion_point(field_mutable:PClientLogin.LoginName)
  return loginname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PClientLogin::release_loginname() {
  // @@protoc_insertion_point(field_release:PClientLogin.LoginName)
  
  return loginname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PClientLogin::set_allocated_loginname(::std::string* loginname) {
  if (loginname != NULL) {
    
  } else {
    
  }
  loginname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginname);
  // @@protoc_insertion_point(field_set_allocated:PClientLogin.LoginName)
}

// -------------------------------------------------------------------

// PClientLoginFeedback

// bool Success = 1;
inline void PClientLoginFeedback::clear_success() {
  success_ = false;
}
inline bool PClientLoginFeedback::success() const {
  // @@protoc_insertion_point(field_get:PClientLoginFeedback.Success)
  return success_;
}
inline void PClientLoginFeedback::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:PClientLoginFeedback.Success)
}

// -------------------------------------------------------------------

// PClientIsOnline

// bool Online = 1;
inline void PClientIsOnline::clear_online() {
  online_ = false;
}
inline bool PClientIsOnline::online() const {
  // @@protoc_insertion_point(field_get:PClientIsOnline.Online)
  return online_;
}
inline void PClientIsOnline::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:PClientIsOnline.Online)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Protocal_2eproto
